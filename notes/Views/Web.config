<?xml version="1.0"?>

<configuration>
  <configSections>
    <sectionGroup name="system.web.webPages.razor" type="System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
      <section name="host" type="System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" />
      <section name="pages" type="System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" />
      <section name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection" requirePermission="false" allowLocation="true"/>
    </sectionGroup>
  </configSections>

  <system.web.webPages.razor>
    <host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
    <pages pageBaseType="System.Web.Mvc.WebViewPage">
      <namespaces>
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Optimization"/>
        <add namespace="System.Web.Routing" />
      </namespaces>
    </pages>
  </system.web.webPages.razor>

  <appSettings>
    <add key="webpages:Enabled" value="false" />
  </appSettings>
  
    <dotNetOpenAuth>
        <openid maxAuthenticationTime="0:05" cacheDiscovery="true">
            <relyingParty>
                <security
                    requireSsl="false"
                    minimumRequiredOpenIdVersion="V10"
                    minimumHashBitLength="160"
                    maximumHashBitLength="256"
                    requireDirectedIdentity="false"
                    requireAssociation="false"
                    rejectUnsolicitedAssertions="false"
                    rejectDelegatingIdentifiers="false"
                    ignoreUnsignedExtensions="false"
                    protectDownlevelReplayAttacks="true"
                    privateSecretMaximumAge="07:00:00" />
                <behaviors>
                    <!-- <add type="Fully.Qualified.ClassName, Assembly" /> -->
                </behaviors>
                <store type="Fully.Qualified.ClassName, Assembly" />
            </relyingParty>
            <provider>
                <security
                    requireSsl="false"
                    protectDownlevelReplayAttacks="true"
                    unsolicitedAssertionVerification="RequireSuccess|LogWarningOnFailure|NeverVerify"
                    minimumHashBitLength="160"
                    maximumHashBitLength="512">
                    <associations>
                        <add type="HMAC-SHA1" lifetime="14.00:00:00" />
                        <add type="HMAC-SHA256" lifetime="14.00:00:00" />
                    </associations>
                </security>
                <behaviors>
                    <!-- <add type="Fully.Qualified.ClassName, Assembly" /> -->
                </behaviors>
                <store type="Fully.Qualified.ClassName, Assembly" />
            </provider>
            <extensionFactories>
                <add type="FullyQualifiedClass.Implementing.IOpenIdExtensionFactory, Assembly" />
            </extensionFactories>
            <xriResolver enabled="true" proxy="xri.net" />
        </openid>
        <messaging clockSkew="00:10:00" lifetime="00:03:00" strict="true">
            <untrustedWebRequest
                timeout="00:00:10"
                readWriteTimeout="00:00:01.500"
                maximumBytesToRead="1048576"
                maximumRedirections="10">
                <whitelistHosts>
                    <!-- since this is a sample, and will often be used with localhost -->
                    <add name="localhost" />
                </whitelistHosts>
                <whitelistHostsRegex>
                    <!-- since this is a sample, and will often be used with localhost -->
                    <add name="\.owndomain\.com$" />
                </whitelistHostsRegex>
                <blacklistHosts>
                </blacklistHosts>
                <blacklistHostsRegex>
                </blacklistHostsRegex>
            </untrustedWebRequest>
        </messaging>
    </dotNetOpenAuth>

  <system.web>
    <httpHandlers>
      <add path="*" verb="*" type="System.Web.HttpNotFoundHandler"/>
    </httpHandlers>

    <!--
        Enabling request validation in view pages would cause validation to occur
        after the input has already been processed by the controller. By default
        MVC performs request validation before a controller processes the input.
        To change this behavior apply the ValidateInputAttribute to a
        controller or action.
    -->
    <pages
        validateRequest="false"
        pageParserFilterType="System.Web.Mvc.ViewTypeParserFilter, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"
        pageBaseType="System.Web.Mvc.ViewPage, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"
        userControlBaseType="System.Web.Mvc.ViewUserControl, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
      <controls>
        <add assembly="System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" namespace="System.Web.Mvc" tagPrefix="mvc" />
      </controls>
    </pages>
  </system.web>

  <system.webServer>  
    <validation validateIntegratedModeConfiguration="false" />

    <handlers>
      <remove name="BlockViewHandler"/>
     <!-- <add name="BlockViewHandler" path="*" verb="*" preCondition="integratedMode" type="System.Web.HttpNotFoundHandler" /> -->
    </handlers>
  </system.webServer>
</configuration>
